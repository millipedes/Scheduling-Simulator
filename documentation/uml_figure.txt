@startuml

package ProcessDomain {
  package Schedulers {
    class scheduling_alorithm {
      {field} + sched_alg : void*
      {field} + sched_alg_type : scheduling_type
    }
    package Lottery {
      class lottery_scheduler {
        {field} + Distribution : function*
      }

      class lottery {
      }
    }

    enum scheduling_type {
      {field} + LOTTERY
      {field} + FAIR
    }
  }

  package CPU {
    class cpu_t {
      {field} + threads : thread **
      {field} + sched_alg : scheduling_alorithm*
      {field} + thread_count : int
      {field} + current_time : int
    }
    class thread {
        {field} + ctq_work : double
        {field} + mtq_work : double
       {method} + int verify_work_quantity()
    }
    note left of thread: If a thread consumes less than\nmtq_work in one \
cycle, the proc is\ngranted mtq_work - ctq_work\nwork units of tickets.
  }

  package Ticket {
    class ticket_bundle {
       {field} + tickets : ticket **
       {field} + size : int
       {field} + id : int
      {method} + ticket_bundle * init_ticket_bundle(int)
      {method} + void add_ticket(ticket_bundle *, int)
      {method} + void free_ticket_bundle(ticket_bundle *)
      {method} + void ticket_bundle_dump_stats(ticket_bundle *)
    }
    class ticket {
       {field} + qty : int
       {field} + id : int
      {method} + ticket * init_ticket(int qty, int id)
      {method} + void free_ticket(ticket * t)
      {method} + void ticket_dump_stats(ticket * t)
    }

    class base {
       {field} + general_population : ticket_bundle**
       {field} + bid : b_id*
       {field} + available_space : int
       {field} + total_space : int
      {method} + base * init_base(int)
      {method} + void add_ticket_bundle(base *, int)
      {method} + void delete_ticket_bundle(base *, int)
      {method} + void left_shift_general_population(base *, int)
      {method} + void delete_last_member(base *)
      {method} + int find_ticket_bundle(base *, int)
      {method} + void free_base(base *)
      {method} + void base_dump_stats(base *)
    }

    class bid {
       {field} + active_ids : int*
       {field} + current_id : int
       {field} + size : int
      {method} + b_id * init_b_id(void);
      {method} + int generate_id(b_id *);
      {method} + void free_b_id(b_id *);
      {method} + void b_id_dump_stats(b_id *);
    }
  }

  package Process {
    class proc_list {
      {field} p_list : process **
      {field} b : base *
      {field} size : int
    }

    class process {
      {field} + tickets : ticket_bundle *
      {field} + type : process_type
    }

    enum process_type {
      {field} + MEMORY
      {field} + IO
    }
  }
}

cpu_t  o--> thread
cpu_t  o--> scheduling_alorithm
cpu_t  o--> proc_list

ticket_bundle o--> ticket
base o--> ticket_bundle
base o--> bid

scheduling_alorithm o--> lottery
scheduling_alorithm o--> scheduling_type

proc_list o--> process
proc_list o--> base

process o--> process_type
process o--> ticket_bundle

@enduml
